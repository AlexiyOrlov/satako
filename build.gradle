plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}
//reload after changing
project.version = '7.0.30-1.20.1'
group = project.property('maven_group')
archivesBaseName = 'Satako'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    //fails the build
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            mods {
                satako {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')

            property 'forge.logging.markers', ''

            property 'forge.logging.console.level', 'info'

            mods {
                satako {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'satako', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                satako {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//tricky task to update mod version
task('updateVersion'){
    def mods = file('src/main/resources/META-INF/mods.toml')
    String text = mods.getText("UTF-8")
    text = text.replaceFirst('version.*=.+', 'version = "'+project.version+'"')
    mods.setText(text)
}

processResources.dependsOn(updateVersion)
publish.dependsOn(updateVersion)

repositories {
    maven{
        url('https://maven.ftb.dev/releases')
    }
    maven {
        url = "https://maven.architectury.dev/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${property('forge_version')}"
    implementation(fg.deobf('dev.architectury:architectury-forge:9.0.8'))
    implementation fg.deobf("dev.ftb.mods:ftb-library-forge:2001.2.6")
    implementation fg.deobf("mezz.jei:jei-1.20.1-forge:15.2.0.27")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "satako",
                "Specification-Vendor"    : project.property('author'),
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : project.property('author'),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task("sourceJar", type: Jar, group: "build") {
    getArchiveClassifier().set("sources")
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        maven {
            name = 'MyMaven'
            url = property("myMavenUrl")
        }
    }
}

//mixin {
//    config('satako.mixins.json')
//}